[{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ninaziegenbein.github.io/wrictools/articles/RedCAP.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"RedCAP","text":"tutorial, learn use RedCap API download upload files RedCap project. RedCap API allows interact project programmatically, enabling automation data transfers downloading uploading files.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/articles/RedCAP.html","id":"overview-of-the-tasks","dir":"Articles","previous_headings":"Introduction","what":"Overview of the Tasks","title":"RedCAP","text":"Obtain API Token RedCap. Set configuration file securely store API token. Download files RedCap based record IDs field names. Process multiple files RedCap Upload files RedCap specific records fields.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/articles/RedCAP.html","id":"obtain-your-api-token","dir":"Articles","previous_headings":"Introduction","what":"1. Obtain Your API Token","title":"RedCAP","text":"interact RedCap API, need API token. token used authenticate requests. Follow steps get token: Go project RedCap. left-hand sidebar, look API option. don’t see , ask project administrator enable API access user. access API page, see option Request API Token. may take hours approved. token approved, find page. Save token securely needed authenticate requests.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/articles/RedCAP.html","id":"set-up-the-configuration-file","dir":"Articles","previous_headings":"Introduction","what":"2. Set Up the Configuration File","title":"RedCAP","text":"can interact RedCap API, need create config.r file. file store API token RedCap URL. Use example config_example.r provided repository. example config.r file look: Important: Keep file secure. working sensitive data, make sure share file commit public repository. use Git, make sure add .gitignore file add config.R . can take look gitignore file repository inspriation.","code":"api_token       <- 'YOUR_API_TOKEN'  # Replace with your personal API token api_url         <- 'https://redcap.au.dk/api/'  # URL for AU RedCap projects"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/RedCAP.html","id":"export-files-from-redcap","dir":"Articles","previous_headings":"Introduction","what":"3. Export Files from RedCap","title":"RedCAP","text":"can use export_file_from_redcap function download files RedCap. function requires three arguments: record_id: unique identifier record want download. fieldname: field name RedCap file stored. path: path want save downloaded file. parameter optional. specify path create folder /tmp (temporary) current directory. Example: configuration file set , can use following code download file. Replace record_id fieldname actual record ID field name:","code":"export_file_from_redcap(record_id = \"12345\", fieldname = \"WRIC_raw\")"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/RedCAP.html","id":"process-multiple-files-from-redcap","dir":"Articles","previous_headings":"Introduction","what":"4. Process multiple files from RedCap","title":"RedCAP","text":"Let’s assume multiple records files need processed. can use preprocess_WRIC_files function download process files multiple records. need specify record IDs project, easiest save .csv file. function arguments similair function preprocess_WRIC_file (functionname different additional s end): csv_file: path CSV file containing record IDs. fieldname: REDCap field WRIC data stored. code: Defines subject IDs generated (id, id+comment, manual). manual: Optional custom codes subjects Room 1 Room 2 code “manual”. save_csv: Whether save processed metadata data CSV files (default: TRUE). path_to_save: directory CSV files saved (default current directory). combine: Whether combine measurements S1 S2 (default: TRUE). method: method used combine measurements (“mean”, “median”, etc.). start end: Optional date-time range filter data (default: NULL, uses entire dataset). function returns list key record ID, corresponding value another list containing R1_metadata, R2_metadata, df_room1, df_room2. Example: Assuming CSV file (record_ids.csv) record IDs fieldname “WRIC_raw”, can call function like :","code":"result <- preprocess_WRIC_files(\"./example_data/record_ids.csv\", \"WRIC_raw\",                              code = \"id\", save_csv = TRUE) R1_metadata <- result$R1_metadata R2_metadata <- result$R2_metadata df_room1 <- result$df_room1 df_room2 <- result$df_room2"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/RedCAP.html","id":"upload-files-to-redcap","dir":"Articles","previous_headings":"Introduction","what":"5. Upload Files to RedCap","title":"RedCAP","text":"can upload files RedCap using upload_file_to_redcap function. function requires: filepath: path file want upload. record_id: record ID file uploaded. fieldname: field name file uploaded. Example: upload file, use following code, replacing filepath, record_id, fieldname actual file path, record ID, field name: Remember delete tmp folder uploading files .","code":"upload_file_to_redcap(filepath = \"./example_data/XXXX_WRIC_data.csv\",                      record_id = \"12345\", fieldname = \"WRIC_processed\")"},{"path":[]},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"what-is-the-difference-between-r-and-rstudio","dir":"Articles","previous_headings":"FAQ and “Programming Terms”","what":"What is the difference between R and RStudio?","title":"wrictools","text":"R programming language, RStudio , called, integrated development environment (IDE) designed specifically R, offering user-friendly interface coding, plotting, managing projects. can think R like language, like english, RStudio Word - program can write english inside. also use programs example libre office latex.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"qmd-vs-r-vs-rmd","dir":"Articles","previous_headings":"FAQ and “Programming Terms”","what":"qmd vs R vs Rmd","title":"wrictools","text":"different types files can write R code. file ending .R standard R script writing running R code, .qmd (Quarto Document) .Rmd (R Markdown) can combine code text dynamic reports, example tutorial.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"wrictools","text":"functions contained R/preprocessing.R file. also access example data, doc_strings, tutorials HowTo’s please download entire repository workshop.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"download-the-repository-from-github","dir":"Articles","previous_headings":"Getting Started","what":"Download the repository from GitHub","title":"wrictools","text":"Clone Repository using Git (Recommended) Using Git standard efficient way work repository, allows easily pull updates manage changes future. don’t Git installed, can download . clone repository: Install Git: haven’t already, install Git computer. Clone Repository: Open terminal (Git Bash Windows), run following command clone repository local machine: create copy repository local machine, can start working immediately. Download Repository ZIP (Alternative) prefer use Git, can download repository ZIP file: Go repository GitHub. Click Code button, click Download ZIP. Extract ZIP file desired location machine. ’ve cloned repository, can easily stay date latest features changes pulling new updates repository. get latest changes repository navigate local repository. terminal, navigate directory cloned repository pull Updates get latest updates (new features, bug fixes, etc.):","code":"git clone https://github.com/hulmanlab/wrictools.git cd Documents/wrictools #add your own path here git pull origin main"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"set-your-working-directory","dir":"Articles","previous_headings":"Getting Started","what":"Set your working directory","title":"wrictools","text":"Set working directory R downloaded WRIC_processing directory. means path end \".../WRIC_processing\". can check full path, [add info mac windows] Via RStudio menu: Session -> Set Working Directory -> Choose Directory Via Terminal: Importing functions “package” source() runs R script loads functions environment","code":"setwd(\"path/to/this/folder/WRIC_processing\") getwd() # To check the current directory source(\"R/preprocessing.R\")"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"preprocess-wric-data","dir":"Articles","previous_headings":"","what":"Preprocess WRIC data","title":"wrictools","text":"Now let’s preprocess txt files, created WRIC. function preproces_WRIC_file() disentangles meta-data top file (ID, comment etc) creates DataFrames csv-files actual data, seperated rooms summarized two measurements room. function returns list “R1_metadata”, “R2_metadata”, “df_room1” “df_room2”. item list DataFrame either metadata preprocessed actual data either room 1 2. ´save_csv` True, DataFrames saved csv files “id_comment_WRIC_data.csv” “id_comment_WRIC_metadata.csv”. Let’s look output really quick room 1: function can lot lot extra parameters can specify. following exact function call, mentioning optional parameters can call default values. Default means, specify parameter, value parameter default. explanations options parameters can specify: filepath: [String, filepath] Directory path WRIC .txt file. code [String] Method generating subject IDs. Default “id”, also possible specify “id+comment”, ID comment values combined “manual”, can specify . manual [String] Custom codes subjects Room 1 Room 2 code “manual”. save_csv [Logical], whether save extracted metadata data CSV files . Default True path_to_save [String] Directory path saving CSV files, NULL uses current directory, NULL Deafult. combine [Logical], whether combine S1 S2 measurements. Default True method [String] Method combining measurements (“mean”, “median”, “s1”, “s2”, “min”, “max”). start [character POSIXct NULL], rows removed, NULL takes first row e.g “2023-11-13 11:43:00” end [character POSIXct NULL], rows removed, NULL takes last rows e.g “2023-11-13 11:43:00” notefilepath: specify path corresponding notefile, code try automatically extract datetime current protocol specification (sleeping, exercising, eating etc). possible please read Note File, start study consistent note taking. TimeStamp note e.g “Participants starts eating 16:10”, time creation note overwritten time specified free-text note. “protocol” extracted keyword search. can check currently included keywords extend checking keywords_dict extract_note_info() function preprocessing.R file. keywords_dict: [Nested List] “dictionary” keywords extracting protocol information notefile.","code":"result <- preprocess_WRIC_file(\"example_data/data.txt\") R1_metadata <- result$R1_metadata R2_metadata <- result$R2_metadata df_room1 <- result$df_room1 df_room2 <- result$df_room2 View(R1_metadata) View(df_room1) result <- preprocess_WRIC_file(     \"./example_data/data.txt\",      code=\"id\",      manual=NULL,      save_csv=TRUE,      path_to_save=NULL,      combine=TRUE,      method=\"mean\",     start=NULL,     end=NULL,     notefilepath= NULL,     keywords_dict=NULL )"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"your-turn","dir":"Articles","previous_headings":"Preprocess WRIC data","what":"Your Turn","title":"wrictools","text":"now turn. Using preprocess_WRIC_file() method create csv file using “data.txt” folder example_data. create csv name “XXXX_WRIC_data.csv” combining S1 S2 measurements taking mean . create csv, cut-start 10:45 13/11/2023 end 11:58 day. csv saved “testing_start_end_parameter_WRIC_data.csv”. Optional: Try notefilepath parameter see happens.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"automatic-note-file-extraction---adaptation-to-your-notes","dir":"Articles","previous_headings":"","what":"Automatic note file extraction - adaptation to your notes","title":"wrictools","text":"One helpful feature preprocess_WRIC_file() method automatically extract protocol note_file, filled manually experiment. “protocol” mean coding wether participant currently sleeping, eating, exercising etc. enables quick processing easy access extract compare various e.g. eating periods. Let’s try : looking df_room1 now, can see new column called “protocol”. can see file starts 0 22:41:21 changes 1.","code":"result <- preprocess_WRIC_file(\"./example_data/data.txt\",                              notefilepath=\"./example_data/note.txt\") View(result$df_room1)"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"your-turn-1","dir":"Articles","previous_headings":"Automatic note file extraction - adaptation to your notes","what":"Your Turn","title":"wrictools","text":"Look note.txt file find change 22:41:21 0 1 might represent. numbers? represent? comparing previous results, notice file now starts later time stops earlier one. might ? _OBS:_Since keep reusing variable names (result, df_room1 etc) use data.txt file create csv_files, overwrite files variables. completely fine tutorial, focused use results. careful work!","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"a-bit-more-information-about-extracting-data-from-the-notefile","dir":"Articles","previous_headings":"Automatic note file extraction - adaptation to your notes","what":"A bit more information about extracting data from the notefile","title":"wrictools","text":"specifying notefilepath, function Check wether time first row. , used calculate drift system. drift added datetimes sepcify within notefile. Check wether information partcipant entering exiting chamber. yes, data cut include times wich participant chamber. keywords entering/exiting? start = c(“ind kammer”, “enter”, “ind”, “entry”) checked first three rows. Reasoning behind , first shows time drift might two rows - one participant - detailing entry chamber. end = c(“ud”, “exit”, “”) checked two last rows. Read row compare contains keyword responds one predefined keywords. yes change label time following times next match. specify keywords_dict parameter use default dictionary keywords protocol values: lists e.g. sleeping, least one word list need present classified sleeping. value end list value used int protocol column created dataframe. Check wether timestamp within comment. yes, time drift added (available) time comment used instead one made note file.","code":"keywords_dict <- list(       sleeping = list(keywords = list(c(\"seng\", \"sleeping\", \"bed\", \"sove\", \"soeve\", \"godnat\", \"night\", \"sleep\")), value = 1),        eating = list(keywords = list(c(\"start\", \"begin\", \"began\"), c(\"maaltid\", \"måltid\", \"eat\", \"meal\", \"food\", \"spis\", \"maal\", \"måd\", \"mad\", \"frokost\", \"morgenmad\", \"middag\", \"snack\", \"aftensmad\")), value = 2),        stop_sleeping = list(keywords = list(c(\"vaagen\", \"vågen\", \"vaekke\", \"væk\", \"wake\", \"woken\", \"vaagnet\")), value = 0),        stop_anything = list(keywords = list(c(\"faerdig\", \"færdig\", \"stop\", \"end \", \"finished\", \"slut\")), value = 0),        activity = list(keywords = list(c(\"start\", \"begin\", \"began\"), c(\"step\", \"exercise\", \"physical activity\", \"active\", \"motion\", \"aktiv\")), value = 3),        ree_start = list(keywords = list(c(\"start\", \"begin\", \"began\"), c(\"REE\", \"BEE\", \"BMR\", \"RMR\", \"RER\")), value = 4)     )"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"your-turn-2","dir":"Articles","previous_headings":"Automatic note file extraction - adaptation to your notes","what":"Your Turn","title":"wrictools","text":"Look note_new.txt notefile. use notefilepath specify keywords_dict automatically process notefile. Use data.txt data file. comment might hard catch keywords avoided using HowToNotefile.pdf?","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"docstrings","dir":"Articles","previous_headings":"","what":"Docstrings","title":"wrictools","text":"Docstrings text explain function , parameter can specify () function returns. packages R installed can read docstring typing ?functionname. Since official package (yet) unfortunately work yet, created bit workaround. long copy paste following piece code top R script, can use doc(\"functionname\") receive output - show docstring see parameter documentation Let’s try look bit closer output: first sentance summary function . Next list parameters tag @param, followed name, type variable short description. Finally @return statement, stating function returns.","code":"# This part tries to import the documentation of the functions tryCatch({   source(\"R/function_docs.R\") }, error = function(e) {   cat(\"Documentation file 'function_docs.R' not found.        Proceeding without documentation.\\n\") })  # This part assigns the documentation imported above to each imported function if (exists(\"function_docs\", envir = .GlobalEnv)) {   for (func_name in names(function_docs)) {     if (exists(func_name, envir = .GlobalEnv)) {       func <- get(func_name, envir = .GlobalEnv)       assign(func_name, structure(func, doc = function_docs[[func_name]]),              envir = .GlobalEnv)    }   } } doc(\"preprocess_WRIC_file\")"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"batch-processing","dir":"Articles","previous_headings":"","what":"Batch Processing","title":"wrictools","text":"Next lets look processing multiple files together. might wric_data files one folder want process time. example just . example_data folder folder named my_project three wric-data files containing two participants. means end generated 12 files, 6 data files 6 metadata files. also want process note files , code becomes little bit complex, since want make sure correct files processed together. can based shared date filename, labour intensive, maybe easier option create list filename pairs. can see options:","code":"# Specify the folder with the wric_data data_folder <- \"./example_data/my_project\"  # Find all files in the folder that start with \"Results_\" data_files <- list.files(data_folder, pattern = \"^Results_\", full.names = TRUE)  # Iterate over all files, call the function and save the csv-files in the same folder for (data_file in data_files) {   preprocess_WRIC_file(data_file, path_to_save = data_folder, code = \"id+comment\") }"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"option-1---pairs-based-on-shared-dates","dir":"Articles","previous_headings":"","what":"wrictools","title":"wrictools","text":"","code":"data_folder <- \"./example_data/my_project\"  data_files <- list.files(data_folder, pattern = \"^Results_.*_(\\\\d{12})\\\\.txt$\",                          full.names = TRUE) note_files <- list.files(data_folder, pattern = \"^note_(\\\\d{12})\\\\.txt$\",                          full.names = TRUE)  # Create a lookup table by extracting the 12-digit date from the filenames note_lookup <- setNames(note_files, sub(\"^(note_)(\\\\d{12})\\\\.txt$\", \"\\\\2\",                          basename(note_files)))  # Loop through the data files and match the date with the note_lookup for (data_file in data_files) {   date <- sub(\".*_(\\\\d{12})\\\\.txt$\", \"\\\\1\", basename(data_file))   print(date)   if (date %in% names(note_lookup)) {     preprocess_WRIC_file(data_file, notefilepath = note_lookup[date],                            path_to_save = data_folder, code = \"id+comment\")     message(\"Processed: \", data_file)   } }"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"option-2---based-on-file-pairs","dir":"Articles","previous_headings":"","what":"wrictools","title":"wrictools","text":"folder structure might look different, might adjust code. (ChatGPT can helpful, feel free ask , stuck.)","code":"# Manually specify the pairs of data files and note files filename_pairs <- list(   list(     data_file = \"./example_data/my_project/Results_1m_0101_202501130800.txt\",     note_file = \"./example_data/my_project/note_202501130800.txt\"   ),   list(     data_file = \"./example_data/my_project/Results_1m_0101_202501190800.txt\",     note_file = \"./example_data/my_project/note_202501190800.txt\"   ),   list(     data_file = \"./example_data/my_project/Results_1m_0101_202501250800.txt\",     note_file = \"./example_data/my_project/note_202501250800.txt\"   ) )  # Loop through the filename pairs and process them for (pair in filename_pairs) {   preprocess_WRIC_file(pair$data_file, notefilepath = pair$note_file,                          path_to_save = \"./example_data/my_project\",                          code = \"id+comment\")   message(\"Processed: \", pair$data_file, \" and \", pair$note_file) }"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"redcap","dir":"Articles","previous_headings":"Batch Processing","what":"RedCap","title":"wrictools","text":"can also use RedCap’s API (Application Programming Interface) use files directly RedCap, also upload resulting files. loop record IDs process files within project RedCap, use preprocess_WRIC_files function. find using RedCap, refer tutorial: tutorials/RedCap_tutorial.qmd OBS: processing, data-file(s) downloaded afterwards deleted . data allowed personal device point, please use package secure server, allowed (temporarily) store data. general end “basic” tutorial split multiple tutorials? -> think makes sense keep workshop","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"working-with-a-subset-of-the-data-specific-time","dir":"Articles","previous_headings":"","what":"Working with a subset of the data (specific time)","title":"wrictools","text":"Often interested certain time period (e.g. eating exercise) want perform calculations based time frames. Let’s look . Import preprocessed data (csv-file) can skip step, already data.frame, example right calling preprocess_WRIC_files. Let’s extract data interested . Let’s start first time participant eating (breakfast) including one hour afterwards. Maybe want compare RER breakfast RER dinner. let’s extract dinner time. participants eating time (e.g 15min) 15 rows protocol 2. work just take second instance, need identify transitions another number 2 choose second transition (something difficult happens often, feature future?) Now can compare two dataframes. example let’s use paired t-test check wether differences RER breakfast dinner. Please note, randomly generated synthetic data represent realistic data. can pull insights . ’s purely demonstrate use . Perfect, easy enough. helpful functions, might want use /sub-dataframes: add_relative_time(dataframe) - Renumbers relative_time column starting 0. Might intuitiv use. Example: data_dinner <- add_relative_time(data_dinner) cut_rows- function can easily create subdataframe (like ) based datetime values (instead protocol value). Example: data_dinner <- cut_rows(data, start=\"2023-11-14 20:04:00\", end=\"2023-11-14 21:04:00\")  course can analyes batch-wise well, way . example:","code":"data <- read.csv(\"./example_data/my_project/AB56_Visit 1_WRIC_data.csv\")  # If you followed the tutorial so far, you should have created this csv file  # in this location (otherwise go back to Batch Processing and execute the first  # code chunk or choose a different path View(data) # we take the first (1) instance where the protocol is 2 (eating) breakfast_index <- which(data$protocol == 2)[1]  print(breakfast_index) # we create a new data.frame where we take the next 60 rows, including the start_index data_breakfast <- data[breakfast_index:(breakfast_index + 59),]  View(data_breakfast) #Let's look at the data to check wether it worked correctly # we additionally check wether the row right before (lag) is not 2 and  # then take the second instance (2) to get the dinner time dinner_index <- which(data$protocol == 2 & lag(data$protocol) != 2)[2]  data_dinner <- data[dinner_index:(dinner_index + 59),] View(data_dinner) #Let's look at the data to check wether it worked correctly t.test(data_breakfast$RER, data_dinner$RER, paired = TRUE) files <- list.files(folder_path, pattern = \"_data\\\\.csv$\", full.names = TRUE) for (file in files) {     data <- read.csv(file)     breakfast_index <- which(data$protocol == 2)[1]     data_breakfast <- data[breakfast_index:(breakfast_index + 59),]      dinner_index <- which(data$protocol == 2 & lag(data$protocol) != 2)[2]      data_dinner <- data[dinner_index:(dinner_index + 59),]     message(\"T-Test Result for : \", file)     t.test(data_breakfast$RER, data_dinner$RER, paired = TRUE) }"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"visualizing","dir":"Articles","previous_headings":"","what":"Visualizing","title":"wrictools","text":"Let’s try visualize data highlighted protocol. First need import script visualization functions: Now can try one generated files: can see plotted RER (Respiratory Exchange Ratio) time highlighted protocol. wanted plot energy expenditure instead? see parameters can specify, let’s use doc() function .","code":"source(\"R/visualizations.R\") visualize_with_protocol(\"./example_data/my_project/AB56_Visit 2_WRIC_data.csv\")"},{"path":"https://ninaziegenbein.github.io/wrictools/articles/wrictools.html","id":"your-turn-3","dir":"Articles","previous_headings":"Visualizing","what":"Your Turn","title":"wrictools","text":"Use doc() function find parameters can specify Try adjusting protocol_colors_label parameters Iterate data-files my_project folder. concludes tutorial. Now know basic functionalities package ready use projects real data. fun!","code":"doc(\"visualize_with_protocol\") # Path to the folder containing the files folder_path <- \"example_data/my_project\"  # Get all files ending with \"_data.csv\" csv_files <- list.files(folder_path, pattern = \"_data.csv\", full.names = TRUE) dataframes <- list()  protocol_colors_labels <- data.frame(   protocol = c(0, 1, 2, 3, 4),   color = c(\"white\", \"purple\", \"#4b3302\", \"#48c5a6\", \"#d0a4c6\"),   label = c(\"Normal\", \"Something\", \"Nothing\", \"Third Thing\", \"?\") )  for (file in csv_files) {   visualize_with_protocol(file, plot=\"Energy Expenditure (kcal/min)\",                            protocol_colors_labels = protocol_colors_labels,                           save_png = TRUE) }"},{"path":"https://ninaziegenbein.github.io/wrictools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nina Ziegenbein. Author, maintainer.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ziegenbein N (2025). wrictools: Processing, Analysis Visualization Whole Room Indirect Calorimetery Data. R package version 0.0.0.9000, https://github.com/NinaZiegenbein/wrictools.","code":"@Manual{,   title = {wrictools: Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data},   author = {Nina Ziegenbein},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/NinaZiegenbein/wrictools}, }"},{"path":"https://ninaziegenbein.github.io/wrictools/index.html","id":"wrictools","dir":"","previous_headings":"","what":"Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data","title":"Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data","text":"repository contains functions, tutorials examples (pre)process analyse data whole room indirect calorimeter Maastricht Instruments using OmniCal software. instead want use functions Python, please click . Please note, Python code maintained March 03.2024.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data","text":"basic example shows solve common problem:","code":"library(wrictools) ## basic example code"},{"path":"https://ninaziegenbein.github.io/wrictools/index.html","id":"preprocess-local-wric-files","dir":"","previous_headings":"","what":"Preprocess Local WRIC file(s)","title":"Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data","text":"WRIC (txt) file locally want preprocess : means reading metadata top file, extracting data txt format csv format, including certain rows start end study, adding relative time measurement, combining two measurements, splitting room1 room2 saving data csv. actions optional, can choose based parameters provide. Note: data.txt example_data folder random data form just highlight data pipeline, used actual analysis! code specifies necessary parameter “filepath” assumes default values parameters. can specify parameters , can seen . default options two function calls return exactly results. explanations options parameters can specify: - filepath: [String, filepath] Directory path WRIC .txt file. - code [String] Method generating subject IDs. Default “id”, also possible specify “id+comment”, ID comment values combined “manual”, can specify . - manual [String] Custom codes subjects Room 1 Room 2 code “manual”. - save_csv [Logical], whether save extracted metadata data CSV files . Default True - path_to_save [String] Directory path saving CSV files, NULL uses current directory, NULL Deafult. - combine [Logical], whether combine S1 S2 measurements. Default True - method [String] Method combining measurements (“mean”, “median”, “s1”, “s2”, “min”, “max”). - start [character POSIXct NULL], rows removed, NULL takes first row e.g “2023-11-13 11:43:00” - end [character POSIXct NULL], rows removed, NULL takes last rows e.g “2023-11-13 11:43:00” - notefilepath: specify path corresponding notefile, code try automatically extract datetime current protocol specification (sleeping, exercising, eating etc). possible please read Note File, start study consistent note taking. TimeStamp note e.g “Participants starts eating 16:10”, time creation note overwritten time specified free-text note. “protocol” extracted keyword search. can check currently included keywords extend checking keywords_dict extract_note_info() function preprocessing.R file. - keywords_dict: [Nested List] “dictionary” keywords extracting protocol information notefile. function returns list “R1_metadata”, “R2_metadata”, “df_room1” “df_room2”. item list DataFrame either metadata preprocessed actual data either room 1 2. ´save_csv` True, DataFrames saved csv files “id_visit_WRIC_data.csv” “id_visit_WRIC_metadata.csv”.","code":"data_txt <- system.file(\"extdata\", \"data_no_comment.txt\", package = \"wrictools\") result <- preprocess_WRIC_file(data_txt) R1_metadata <- result$R1_metadata R2_metadata <- result$R2_metadata df_room1 <- result$df_room1 df_room2 <- result$df_room2 result <- preprocess_WRIC_file(     data_txt,      code=\"id\",      manual=NULL,      save_csv=FALSE,      path_to_save=NULL,      combine=TRUE,      method=\"mean\",     start=NULL,     end=NULL,     notefilepath= NULL,     keywords_dict=NULL )"},{"path":"https://ninaziegenbein.github.io/wrictools/index.html","id":"preprocess-multiple-files-on-redcap","dir":"","previous_headings":"","what":"Preprocess multiple files on RedCap","title":"Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data","text":"want preprocess multiple files access RedCap Server using csv-file containing record IDs: access data RedCap first need set config.r file. can use config_example.r template input personal API-Token repository data (see ‘Get API Token RedCap’ ). Make sure config.r file stays locally without anyone else access . handling sensitive data might make sense delete token file using . Besides setting config file, need specify field-name RedCap instrument raw WRIC-data located (example field named “WRIC_raw”) need provide record IDs records want access. simply need written column words comments need match record IDs RedCap. Please note code work 1) set config file, 2) create csv record ids change file path, 3) write correct field name project.","code":"result <- preprocess_WRIC_files(\"./example_data/record_ids.csv\", \"WRIC_raw\", code = \"id\", manual = NULL, save_csv = True, path_to_save = NULL, combine = True, method = \"mean\", start = NULL, end = NULL) R1_metadata <- result$R1_metadata R2_metadata <- result$R2_metadata df_room1 <- result$df_room1 df_room2 <- result$df_room2"},{"path":"https://ninaziegenbein.github.io/wrictools/index.html","id":"get-your-api-token-for-redcap","dir":"","previous_headings":"","what":"Get your API Token for RedCap","title":"Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data","text":"can find API option menu, might adjust rights project clicking User Rights adjusting API rights (creator project, ) request generation API Token (experience takes couple hours) place can find Token request approved token generated","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/index.html","id":"uploading-data-to-redcap","dir":"","previous_headings":"","what":"Uploading Data to RedCap","title":"Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data","text":"can use function upload_file_to_redcap(filepath, record_id, fieldname) upload file specific record fieldname RedCap. need set-config file.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/index.html","id":"support-maintenance-and-future-work","dir":"","previous_headings":"","what":"Support, Maintenance and Future Work","title":"Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data","text":"issues, questions, suggestions feel free reach Nina Ziegenbein nina.ziegenbein@rm.dk.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/add_relative_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Relative Time in minutes to DataFrame. Rows before the start_time will be indicated negative. — add_relative_time","title":"Add Relative Time in minutes to DataFrame. Rows before the start_time will be indicated negative. — add_relative_time","text":"Add Relative Time minutes DataFrame. Rows start_time indicated negative.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/add_relative_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Relative Time in minutes to DataFrame. Rows before the start_time will be indicated negative. — add_relative_time","text":"","code":"add_relative_time(df, start_time = NULL)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/add_relative_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Relative Time in minutes to DataFrame. Rows before the start_time will be indicated negative. — add_relative_time","text":"df data frame containing 'datetime' column. start_time Optional; starting time calculating relative time. format compatible POSIXct (eg. \"2023-11-13 11:40:00\")","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/add_relative_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Relative Time in minutes to DataFrame. Rows before the start_time will be indicated negative. — add_relative_time","text":"data frame additional column 'relative_timemin' indicating time minutes start time.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/add_relative_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Relative Time in minutes to DataFrame. Rows before the start_time will be indicated negative. — add_relative_time","text":"","code":"# Create example data df <- data.frame(   datetime = as.POSIXct(c(\"2023-11-13 11:40:00\", \"2023-11-13 11:45:00\", \"2023-11-13 11:50:00\")) ) add_relative_time(df) #>              datetime relative_time #> 1 2023-11-13 11:40:00             0 #> 2 2023-11-13 11:45:00             5 #> 3 2023-11-13 11:50:00            10 add_relative_time(df, start_time = \"2023-11-13 11:45:00\") #>              datetime relative_time #> 1 2023-11-13 11:40:00            -5 #> 2 2023-11-13 11:45:00             0 #> 3 2023-11-13 11:50:00             5"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/check_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the subject ID code and return corresponding Room 1 and Room 2 codes. — check_code","title":"Check the subject ID code and return corresponding Room 1 and Room 2 codes. — check_code","text":"Check subject ID code return corresponding Room 1 Room 2 codes.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/check_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the subject ID code and return corresponding Room 1 and Room 2 codes. — check_code","text":"","code":"check_code(code, manual, r1_metadata, r2_metadata)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/check_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the subject ID code and return corresponding Room 1 and Room 2 codes. — check_code","text":"code Method generating subject IDs (\"id\", \"id+comment\", \"manual\"). manual list custom codes Room 1 Room 2, required code \"manual\". r1_metadata DataFrame metadata Room 1, containing \"Subject ID\" \"Comments\". r2_metadata DataFrame metadata Room 2, containing \"Subject ID\" \"Comments\".","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/check_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the subject ID code and return corresponding Room 1 and Room 2 codes. — check_code","text":"list containing codes Room 1 Room 2.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/check_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the subject ID code and return corresponding Room 1 and Room 2 codes. — check_code","text":"","code":"# Example metadata for Room 1 and Room 2 r1 <- data.frame(`Subject.ID` = \"S001\", `Comments` = \"Morning\") r2 <- data.frame(`Subject.ID` = \"S002\", `Comments` = \"Afternoon\")  # Use subject IDs only check_code(\"id\", NULL, r1, r2) #> [1] \"S001\" \"S002\"  # Use subject IDs + comments check_code(\"id+comment\", NULL, r1, r2) #> [1] \"S001_Morning\"   \"S002_Afternoon\"  # Use manual codes check_code(\"manual\", c(\"custom1\", \"custom2\"), r1, r2) #> [1] \"custom1\" \"custom2\""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/check_discrepancies.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for discrepancies between S1 and S2 measurements in the DataFrame and prints them to the console. This function is not included in the big pre-processing function, as it is more intended to perform a quality check on your data and not to automatically inform the processing of the data. — check_discrepancies","title":"Checks for discrepancies between S1 and S2 measurements in the DataFrame and prints them to the console. This function is not included in the big pre-processing function, as it is more intended to perform a quality check on your data and not to automatically inform the processing of the data. — check_discrepancies","text":"Checks discrepancies S1 S2 measurements DataFrame prints console. function included big pre-processing function, intended perform quality check data automatically inform processing data.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/check_discrepancies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for discrepancies between S1 and S2 measurements in the DataFrame and prints them to the console. This function is not included in the big pre-processing function, as it is more intended to perform a quality check on your data and not to automatically inform the processing of the data. — check_discrepancies","text":"","code":"check_discrepancies(df, threshold = 0.05, individual = FALSE)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/check_discrepancies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for discrepancies between S1 and S2 measurements in the DataFrame and prints them to the console. This function is not included in the big pre-processing function, as it is more intended to perform a quality check on your data and not to automatically inform the processing of the data. — check_discrepancies","text":"df DataFrame containing wric data columns S1 S2 measurements. threshold Numeric threshold percentage mean relative delta discrepancies (default 0.05). individual Logical, TRUE checks reports individual row discrepancies beyond threshold (default FALSE).","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/check_discrepancies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for discrepancies between S1 and S2 measurements in the DataFrame and prints them to the console. This function is not included in the big pre-processing function, as it is more intended to perform a quality check on your data and not to automatically inform the processing of the data. — check_discrepancies","text":"None. Prints discrepancies console.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/check_discrepancies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for discrepancies between S1 and S2 measurements in the DataFrame and prints them to the console. This function is not included in the big pre-processing function, as it is more intended to perform a quality check on your data and not to automatically inform the processing of the data. — check_discrepancies","text":"","code":"data_txt <- system.file(\"extdata\", \"data.txt\", package = \"wrictools\") lines <- readLines(data_txt) # Create example WRIC data frames result <- create_wric_df(   filepath = data_txt,   lines = lines,   save_csv = FALSE,   code_1 = \"R1\",   code_2 = \"R2\",   path_to_save = tempdir(),   start = NULL,   end = NULL,   notefilepath = NULL ) #> Rows: 717 Columns: 67 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr   (4): X1, X18, X35, X52 #> dbl  (56): X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X2... #> lgl   (3): X17, X34, X51 #> time  (4): X2, X19, X36, X53 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. check_discrepancies(result$df_room1) #> r1_S1_VO2 and r1_S2_VO2 have a mean relative delta of 0.0267. #> r1_S1_VO2 and r1_S2_VO2 exceed the 0.05% threshold. #> r1_S1_VCO2 and r1_S2_VCO2 have a mean relative delta of 0.0151. #> r1_S1_VCO2 and r1_S2_VCO2 exceed the 0.05% threshold. #> r1_S1_RER and r1_S2_RER have a mean relative delta of 0.0033. #> r1_S1_RER and r1_S2_RER exceed the 0.05% threshold. #> r1_S1_FiO2 and r1_S2_FiO2 have a mean relative delta of -0.0044. #> r1_S1_FiO2 and r1_S2_FiO2 exceed the 0.05% threshold. #> r1_S1_FeO2 and r1_S2_FeO2 have a mean relative delta of 0.0011. #> r1_S1_FeO2 and r1_S2_FeO2 exceed the 0.05% threshold. #> r1_S1_FiCO2 and r1_S2_FiCO2 have a mean relative delta of 0.0224. #> r1_S1_FiCO2 and r1_S2_FiCO2 exceed the 0.05% threshold. #> r1_S1_FeCO2 and r1_S2_FeCO2 have a mean relative delta of 0.0137. #> r1_S1_FeCO2 and r1_S2_FeCO2 exceed the 0.05% threshold. #> r1_S1_Flow and r1_S2_Flow have a mean relative delta of 0.0007. #> r1_S1_Flow and r1_S2_Flow exceed the 0.05% threshold. #> r1_S1_Energy Expenditure (kcal/min) and r1_S2_Energy Expenditure (kcal/min) have a mean relative delta of 0.0027. #> r1_S1_Energy Expenditure (kcal/min) and r1_S2_Energy Expenditure (kcal/min) exceed the 0.05% threshold. #> r1_S1_Energy Expenditure (kJ/min) and r1_S2_Energy Expenditure (kJ/min) have a mean relative delta of 0.0016. #> r1_S1_Energy Expenditure (kJ/min) and r1_S2_Energy Expenditure (kJ/min) exceed the 0.05% threshold."},{"path":"https://ninaziegenbein.github.io/wrictools/reference/combine_measurements.html","id":null,"dir":"Reference","previous_headings":"","what":"Combines S1 and S2 measurements in the DataFrame using the specified method. — combine_measurements","title":"Combines S1 and S2 measurements in the DataFrame using the specified method. — combine_measurements","text":"Combines S1 S2 measurements DataFrame using specified method.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/combine_measurements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combines S1 and S2 measurements in the DataFrame using the specified method. — combine_measurements","text":"","code":"combine_measurements(df, method = \"mean\")"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/combine_measurements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combines S1 and S2 measurements in the DataFrame using the specified method. — combine_measurements","text":"df DataFrame containing wric data S1 S2 measurement columns. method String specifying method combine measurements (\"mean\", \"median\", \"s1\", \"s2\", \"min\", \"max\").","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/combine_measurements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combines S1 and S2 measurements in the DataFrame using the specified method. — combine_measurements","text":"DataFrame combined measurements.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/combine_measurements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combines S1 and S2 measurements in the DataFrame using the specified method. — combine_measurements","text":"","code":"data_txt <- system.file(\"extdata\", \"data.txt\", package = \"wrictools\") lines <- readLines(data_txt)  # Create example WRIC DataFrames result <- create_wric_df(   filepath = data_txt,   lines = lines,   save_csv = FALSE,   code_1 = \"R1\",   code_2 = \"R2\",   path_to_save = tempdir(),   start = NULL,   end = NULL,   notefilepath = NULL ) #> Rows: 717 Columns: 67 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr   (4): X1, X18, X35, X52 #> dbl  (56): X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X2... #> lgl   (3): X17, X34, X51 #> time  (4): X2, X19, X36, X53 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  # Combine measurements using different methods combined_mean <- combine_measurements(result$df_room1, method = \"mean\") combined_median <- combine_measurements(result$df_room1, method = \"median\") combined_s1 <- combine_measurements(result$df_room1)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/create_wric_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates DataFrames for wric data from a file and optionally saves them as CSV files. — create_wric_df","title":"Creates DataFrames for wric data from a file and optionally saves them as CSV files. — create_wric_df","text":"Creates DataFrames wric data file optionally saves CSV files.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/create_wric_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates DataFrames for wric data from a file and optionally saves them as CSV files. — create_wric_df","text":"","code":"create_wric_df(   filepath,   lines,   save_csv = FALSE,   code_1,   code_2,   path_to_save,   start,   end,   notefilepath )"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/create_wric_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates DataFrames for wric data from a file and optionally saves them as CSV files. — create_wric_df","text":"filepath Path wric .txt file. lines List strings read file locate data start. save_csv Logical, whether save DataFrames CSV files. code_1 String representing codes Room 1. code_2 String representing codes Room 2. path_to_save Directory path saving CSV files, NULL uses current directory. start character POSIXct NULL, rows removed, NULL takes first row e.g \"2023-11-13 11:43:00\" end character POSIXct NULL, rows removed, NULL takes last row e.g \"2023-11-13 11:43:00\" notefilepath String, path notefile","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/create_wric_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates DataFrames for wric data from a file and optionally saves them as CSV files. — create_wric_df","text":"list containing DataFrames Room 1 Room 2 measurements.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/create_wric_df.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Creates DataFrames for wric data from a file and optionally saves them as CSV files. — create_wric_df","text":"Raises error Date Time columns inconsistent across rows.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/create_wric_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates DataFrames for wric data from a file and optionally saves them as CSV files. — create_wric_df","text":"","code":"# Load example files from the package data_txt <- system.file(\"extdata\", \"data.txt\", package = \"wrictools\") notes_txt <- system.file(\"extdata\", \"note.txt\", package = \"wrictools\")  # Create the data lines for parsing lines <- readLines(data_txt)  # Call the function result <- create_wric_df(   filepath = data_txt,   lines = lines,   save_csv = FALSE,   code_1 = \"XXXX\",   code_2 = \"YYYY\",   path_to_save = tempdir(),   start = NULL,   end = NULL,   notefilepath = notes_txt ) #> Rows: 717 Columns: 67 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr   (4): X1, X18, X35, X52 #> dbl  (56): X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X2... #> lgl   (3): X17, X34, X51 #> time  (4): X2, X19, X36, X53 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> [1] \"Starting time for room 1 is 2023-11-13 21:14:22 and end 2023-11-14 08:47:48 and for room 2 start is 2023-11-13 21:14:22 and end 2023-11-14 06:51:36\""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/cut_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters rows in a DataFrame based on an optional start and end datetime range. — cut_rows","title":"Filters rows in a DataFrame based on an optional start and end datetime range. — cut_rows","text":"Filters rows DataFrame based optional start end datetime range.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/cut_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters rows in a DataFrame based on an optional start and end datetime range. — cut_rows","text":"","code":"cut_rows(df, start = NULL, end = NULL)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/cut_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters rows in a DataFrame based on an optional start and end datetime range. — cut_rows","text":"df data.frame DataFrame \"datetime\" column filter. start character POSIXct NULL, optional; Start datetime; rows removed. NULL, uses earliest datetime DataFrame. end character POSIXct NULL, optional End datetime; rows removed. NULL, uses latest datetime DataFrame.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/cut_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters rows in a DataFrame based on an optional start and end datetime range. — cut_rows","text":"data.frame DataFrame rows specified start end dates, full DataFrame NULL.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/cut_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters rows in a DataFrame based on an optional start and end datetime range. — cut_rows","text":"","code":"df <- data.frame(   datetime = as.POSIXct(c(     \"2023-11-13 11:40:00\",     \"2023-11-13 11:45:00\",     \"2023-11-13 11:50:00\"   )) )  # Filter rows from 11:45 onward cut_rows(df, start = \"2023-11-13 11:45:00\") #>              datetime #> 2 2023-11-13 11:45:00 #> 3 2023-11-13 11:50:00  # Filter rows between 11:40 and 11:45 cut_rows(df, start = \"2023-11-13 11:40:00\", end = \"2023-11-13 11:45:00\") #>              datetime #> 1 2023-11-13 11:40:00 #> 2 2023-11-13 11:45:00  # No filtering (both NULL) cut_rows(df) #>              datetime #> 1 2023-11-13 11:40:00 #> 2 2023-11-13 11:45:00 #> 3 2023-11-13 11:50:00"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/detect_start_end.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically detect enter and exit from the chamber based on the notefile. Returns the start and end times for two participants. — detect_start_end","title":"Automatically detect enter and exit from the chamber based on the notefile. Returns the start and end times for two participants. — detect_start_end","text":"Automatically detect enter exit chamber based notefile. Returns start end times two participants.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/detect_start_end.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically detect enter and exit from the chamber based on the notefile. Returns the start and end times for two participants. — detect_start_end","text":"","code":"detect_start_end(notes_path)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/detect_start_end.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically detect enter and exit from the chamber based on the notefile. Returns the start and end times for two participants. — detect_start_end","text":"notes_path string - path note file","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/detect_start_end.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically detect enter and exit from the chamber based on the notefile. Returns the start and end times for two participants. — detect_start_end","text":"list - list two elements (\"1\" \"2\"), containing tuple (start, end) time. Returns NA possible find start end time.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/detect_start_end.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically detect enter and exit from the chamber based on the notefile. Returns the start and end times for two participants. — detect_start_end","text":"","code":"notes_path <- system.file(\"extdata\", \"note.txt\", package = \"wrictools\") detect_start_end(notes_path) #> $`1` #> $`1`[[1]] #> [1] \"2023-11-13 21:14:22 UTC\" #>  #> $`1`[[2]] #> [1] \"2023-11-14 08:47:48 UTC\" #>  #>  #> $`2` #> $`2`[[1]] #> [1] \"2023-11-13 21:14:22 UTC\" #>  #> $`2`[[2]] #> [1] \"2023-11-14 06:51:36 UTC\" #>  #>"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/export_file_from_redcap.html","id":null,"dir":"Reference","previous_headings":"","what":"Exports a file from REDCap based on the specified record ID and field name. — export_file_from_redcap","title":"Exports a file from REDCap based on the specified record ID and field name. — export_file_from_redcap","text":"specify path, data downloaded temporary folder deleted R session ends.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/export_file_from_redcap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exports a file from REDCap based on the specified record ID and field name. — export_file_from_redcap","text":"","code":"export_file_from_redcap(record_id, fieldname, path = NULL, api_url, api_token)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/export_file_from_redcap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exports a file from REDCap based on the specified record ID and field name. — export_file_from_redcap","text":"record_id String containing unique identifier record REDCap. fieldname Field name export file. path File path exported file saved. api_url String, URL REDCap API, specified personal config.R file api_token String, personal token REDCap API, specified personal config.R file","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/export_file_from_redcap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exports a file from REDCap based on the specified record ID and field name. — export_file_from_redcap","text":"None. file saved specified path.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/export_file_from_redcap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exports a file from REDCap based on the specified record ID and field name. — export_file_from_redcap","text":"","code":"if (FALSE) { # file.exists(path.expand(\"~/.config.R\")) source(path.expand(\"~/.config.R\")) export_file_from_redcap(record_id = \"1\", fieldname = \"wric_data\",                         api_url = api_url, api_token = api_token) }"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_meta_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts metadata for two subjects from text lines and optionally saves it as CSV files. — extract_meta_data","title":"Extracts metadata for two subjects from text lines and optionally saves it as CSV files. — extract_meta_data","text":"Extracts metadata two subjects text lines optionally saves CSV files.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_meta_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts metadata for two subjects from text lines and optionally saves it as CSV files. — extract_meta_data","text":"","code":"extract_meta_data(lines, code, manual, save_csv = FALSE, path_to_save)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_meta_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts metadata for two subjects from text lines and optionally saves it as CSV files. — extract_meta_data","text":"lines List strings containing wric metadata. code Method generating subject IDs (\"id\", \"id+comment\", \"manual\"). manual Custom codes Room 1 Room 2 subjects code \"manual\". save_csv Logical, whether save extracted metadata CSV files. path_to_save Directory path saving CSV files, NULL uses current directory.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_meta_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts metadata for two subjects from text lines and optionally saves it as CSV files. — extract_meta_data","text":"list containing Room 1 code, Room 2 code, DataFrames r1_metadata r2_metadata.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_meta_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts metadata for two subjects from text lines and optionally saves it as CSV files. — extract_meta_data","text":"","code":"lines <- c(   \"OmniCal software by ing.P.F.M.Schoffelen, Dept. of Human Biology, Maastricht University\",   \"file identifier is C:\\\\MI_Room_Calorimeter\\\\Results_online\\\\1_minute\\\\Results.txt\",   \"\",   \"Room 1\\tProject\\tSubject ID\\tExperiment performed by\\tComments\",   \"\\tPROJECT\\tXXXX\\tJANE DOE\\t\",   \"Room 2\\tProject\\tSubject ID\\tExperiment performed by\\tComments\",   \"\\tPROJECT\\tYYYY\\tJOHN DOE\\t\" )  extract_meta_data(lines, code = \"id\", manual = NULL, save_csv = FALSE, path_to_save = NULL) #> $code_1 #> [1] \"XXXX\" #>  #> $code_2 #> [1] \"YYYY\" #>  #> $r1_metadata #>   Project Subject.ID Experiment.performed.by Comments #> 1 PROJECT       XXXX                JANE DOE     <NA> #>  #> $r2_metadata #>   Project Subject.ID Experiment.performed.by Comments #> 1 PROJECT       YYYY                JOHN DOE     <NA> #>"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_note_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts and processes note information from a specified notes file, categorizing events based on predefined keywords, and updates two DataFrames with protocol information for different participants. — extract_note_info","title":"Extracts and processes note information from a specified notes file, categorizing events based on predefined keywords, and updates two DataFrames with protocol information for different participants. — extract_note_info","text":"Extracts processes note information specified notes file, categorizing events based predefined keywords, updates two DataFrames protocol information different participants.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_note_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts and processes note information from a specified notes file, categorizing events based on predefined keywords, and updates two DataFrames with protocol information for different participants. — extract_note_info","text":"","code":"extract_note_info(notes_path, df_room1, df_room2, keywords_dict = NULL)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_note_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts and processes note information from a specified notes file, categorizing events based on predefined keywords, and updates two DataFrames with protocol information for different participants. — extract_note_info","text":"notes_path string - file path notes file containing event data. df_room1 DataFrame - DataFrame participant 1, updated protocol info. df_room2 DataFrame - DataFrame participant 2, updated protocol info. keywords_dict nested list - used identify keywords extract protocol values","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_note_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts and processes note information from a specified notes file, categorizing events based on predefined keywords, and updates two DataFrames with protocol information for different participants. — extract_note_info","text":"list - list containing two updated DataFrames: - df_room1: Updated DataFrame participant 1 protocol data. - df_room2: Updated DataFrame participant 2 protocol data.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_note_info.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extracts and processes note information from a specified notes file, categorizing events based on predefined keywords, and updates two DataFrames with protocol information for different participants. — extract_note_info","text":"'Comment' field start '1' '2' indicate participant, may empty indicate . keywords_dict can modified fit specific study protocols, multi-group checks keyword matching. See ReadMe vignettes detailed examples.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/extract_note_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts and processes note information from a specified notes file, categorizing events based on predefined keywords, and updates two DataFrames with protocol information for different participants. — extract_note_info","text":"","code":"notes_file <- system.file(\"extdata\", \"note.txt\", package = \"wrictools\") df1 <- data.frame(datetime = as.POSIXct(\"2023-11-13 11:40:00\") + 0:2*300) df2 <- data.frame(datetime = as.POSIXct(\"2023-11-13 11:40:00\") + 0:2*300) result <- extract_note_info(notes_file, df1, df2) #> Drift: 1.35 #>             timestamp protocol #> 1 2023-11-13 22:39:53        1 #> 2 2023-11-14 06:45:00        0 #> 3 2023-11-14 07:01:36        4 #> 4 2023-11-14 07:32:50        0 #> 5 2023-11-14 08:13:27        2 #> 6 2023-11-14 08:26:00        0 #>             timestamp protocol #> 1 2023-11-13 22:39:53        1 #> 2 2023-11-14 06:57:25        0 #> 3 2023-11-14 07:19:48        4 #> 4 2023-11-14 07:43:24        0 #> 5 2023-11-14 08:17:00        2 #> 6 2023-11-14 08:42:00        0"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/open_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Opens a wric .txt file and reads its contents. — open_file","title":"Opens a wric .txt file and reads its contents. — open_file","text":"Opens wric .txt file reads contents.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/open_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Opens a wric .txt file and reads its contents. — open_file","text":"","code":"open_file(filepath)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/open_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Opens a wric .txt file and reads its contents. — open_file","text":"filepath description filepath","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/open_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Opens a wric .txt file and reads its contents. — open_file","text":"list strings representing lines file.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/open_file.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Opens a wric .txt file and reads its contents. — open_file","text":"Raises error file valid wric data file.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/preprocess_WRIC_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocesses a wric data file, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_file","title":"Preprocesses a wric data file, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_file","text":"Preprocesses wric data file, extracting metadata, creating DataFrames, optionally saving results.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/preprocess_WRIC_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocesses a wric data file, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_file","text":"","code":"preprocess_wric_file(   filepath,   code = \"id\",   manual = NULL,   save_csv = FALSE,   path_to_save = NULL,   combine = TRUE,   method = \"mean\",   start = NULL,   end = NULL,   notefilepath = NULL,   keywords_dict = NULL )"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/preprocess_WRIC_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocesses a wric data file, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_file","text":"filepath Path wric .txt file. code Method generating subject IDs (\"id\", \"id+comment\", \"manual\"). manual Custom codes subjects Room 1 Room 2 code \"manual\". save_csv Logical, whether save extracted metadata data CSV files. path_to_save Directory path saving CSV files, NULL uses current directory. combine Logical, whether combine S1 S2 measurements. method Method combining measurements (\"mean\", \"median\", \"s1\", \"s2\", \"min\", \"max\"). start character POSIXct NULL, rows removed, NULL takes first row e.g \"2023-11-13 11:43:00\" end character POSIXct NULL, rows removed, NULL takes last row e.g \"2023-11-13 11:43:00\" notefilepath String, Directory path corresponding note file (.txt) keywords_dict Nested List, used extract protocol values note file","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/preprocess_WRIC_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocesses a wric data file, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_file","text":"list containing metadata DataFrames Room 1 Room 2.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/preprocess_WRIC_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocesses a wric data file, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_file","text":"","code":"outdir <- file.path(tempdir(), \"wrictools\") dir.create(outdir, showWarnings = FALSE) data_txt <- system.file(\"extdata\", \"data_no_comment.txt\", package = \"wrictools\") result <- preprocess_wric_file(data_txt, path_to_save = outdir) #> Rows: 4 Columns: 67 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr   (4): X1, X18, X35, X52 #> dbl  (56): X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X2... #> lgl   (3): X17, X34, X51 #> time  (4): X2, X19, X36, X53 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. unlink(outdir, recursive = TRUE)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/preprocess_WRIC_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocesses multiple wric_files by RedCAP record ID, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_files","title":"Preprocesses multiple wric_files by RedCAP record ID, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_files","text":"Preprocesses multiple wric_files RedCAP record ID, extracting metadata, creating DataFrames, optionally saving results.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/preprocess_WRIC_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocesses multiple wric_files by RedCAP record ID, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_files","text":"","code":"preprocess_wric_files(   csv_file,   fieldname,   code = \"id\",   manual = NULL,   save_csv = FALSE,   path_to_save = NULL,   combine = TRUE,   method = \"mean\",   start = NULL,   end = NULL,   path = NULL,   api_url,   api_token )"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/preprocess_WRIC_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocesses multiple wric_files by RedCAP record ID, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_files","text":"csv_file Path CSV file containing record IDs. fieldname field name exporting wric data RedCAP. code Method generating subject IDs (\"id\", \"id+comment\", \"manual\"). manual Custom codes subjects Room 1 Room 2 code \"manual\". save_csv Logical, whether save extracted metadata data CSV files. path_to_save Directory path saving CSV files, NULL uses current directory. combine Logical, whether combine S1 S2 measurements. method Method combining measurements (\"mean\", \"median\", \"s1\", \"s2\", \"min\", \"max\"). start character POSIXct NULL, rows removed, NULL takes first row e.g \"2023-11-13 11:43:00\" end character POSIXct NULL, rows removed, NULL takes last row e.g \"2023-11-13 11:43:00\" path File path exported file saved. api_url String, URL REDCap API, specified personal config.R file api_token String, personal token REDCap API, specified personal config.R file","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/preprocess_WRIC_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocesses multiple wric_files by RedCAP record ID, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_files","text":"list key record ID value list : (r1_metadata, r2_metadata, df_room1, df_room2).","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/preprocess_WRIC_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocesses multiple wric_files by RedCAP record ID, extracting metadata, creating DataFrames, and optionally saving results. — preprocess_wric_files","text":"","code":"if (FALSE) { # file.exists(path.expand(\"~/.config.R\")) source(path.expand(\"~/.config.R\")) tmp_csv <- tempfile(fileext = \".csv\") write.csv(data.frame(X1 = c(\"record1\", \"record2\")), tmp_csv, row.names = FALSE)  # Use dummy API URL and token if (file.exists(tmp_csv)) {   preprocess_wric_files(     csv_file = tmp_csv,     fieldname = \"wric_data\",     api_url = api_url,     api_token = api_token,     save_csv = FALSE   ) } }"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/upload_file_to_redcap.html","id":null,"dir":"Reference","previous_headings":"","what":"Uploads a file to REDCap for a specified record ID and field name. — upload_file_to_redcap","title":"Uploads a file to REDCap for a specified record ID and field name. — upload_file_to_redcap","text":"Uploads file REDCap specified record ID field name.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/upload_file_to_redcap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uploads a file to REDCap for a specified record ID and field name. — upload_file_to_redcap","text":"","code":"upload_file_to_redcap(filepath, record_id, fieldname, api_url, api_token)"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/upload_file_to_redcap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uploads a file to REDCap for a specified record ID and field name. — upload_file_to_redcap","text":"filepath Path file uploaded. record_id String containing unique identifier record REDCap. fieldname Field name file uploaded. api_url String, URL REDCap API, specified personal config.R file api_token String, personal token REDCap API, specified personal config.R file","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/upload_file_to_redcap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uploads a file to REDCap for a specified record ID and field name. — upload_file_to_redcap","text":"None. Prints HTTP status code request.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/upload_file_to_redcap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uploads a file to REDCap for a specified record ID and field name. — upload_file_to_redcap","text":"","code":"if (FALSE) { # file.exists(path.expand(\"~/.config.R\")) source(path.expand(\"~/.config.R\")) tmp <- tempfile(fileext = \".txt\") writeLines(c(\"Example content\"), tmp) upload_file_to_redcap(filepath = tmp, record_id = \"1\", fieldname = \"wric_data\",                         api_url = api_url, api_token = api_token) }"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/visualize_with_protocol.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizes time-series data from a WRIC CSV file, highlighting protocol changes and optionally saving the plot. — visualize_with_protocol","title":"Visualizes time-series data from a WRIC CSV file, highlighting protocol changes and optionally saving the plot. — visualize_with_protocol","text":"Visualizes time-series data WRIC CSV file, highlighting protocol changes optionally saving plot.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/visualize_with_protocol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizes time-series data from a WRIC CSV file, highlighting protocol changes and optionally saving the plot. — visualize_with_protocol","text":"","code":"visualize_with_protocol(   csv_file,   plot = \"RER\",   protocol_colors_labels = NULL,   save_png = FALSE,   path_to_save = NULL )"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/visualize_with_protocol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizes time-series data from a WRIC CSV file, highlighting protocol changes and optionally saving the plot. — visualize_with_protocol","text":"csv_file Path CSV file containing time-series data. plot string specifying column plot. Defaults \"RER\". can valid column name CSV file. protocol_colors_labels data frame containing protocol codes, colors, labels. NULL, defaults predefined set protocols. save_png Logical, whether save plot PNG file. Defaults FALSE. path_to_save Directory path saving PNG file. NULL, saves current working directory.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/visualize_with_protocol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizes time-series data from a WRIC CSV file, highlighting protocol changes and optionally saving the plot. — visualize_with_protocol","text":"ggplot2 object visualizing specified data protocol highlights. Optionally saves plot file save_png TRUE.","code":""},{"path":"https://ninaziegenbein.github.io/wrictools/reference/visualize_with_protocol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizes time-series data from a WRIC CSV file, highlighting protocol changes and optionally saving the plot. — visualize_with_protocol","text":"","code":"csv <- system.file(\"extdata\", \"example.csv\", package = \"wrictools\") visualize_with_protocol(csv, plot = \"VO2\")"},{"path":"https://ninaziegenbein.github.io/wrictools/reference/wrictools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"wrictools: Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data — wrictools-package","title":"wrictools: Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data — wrictools-package","text":"Description: Provides functions, tutorials, examples preprocess, analyze, visualize data whole room indirect calorimeters (WRIC) Maastricht Instruments, using 'OmniCal' software. functions may also work WRICs manufacturers, though full functionality validated Maastricht Instruments devices.","code":""},{"path":[]},{"path":"https://ninaziegenbein.github.io/wrictools/reference/wrictools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"wrictools: Processing, Analysis and Visualization of Whole Room Indirect Calorimetery Data — wrictools-package","text":"Maintainer: Nina Ziegenbein nina.ziegenbein@web.de (ORCID)","code":""}]
